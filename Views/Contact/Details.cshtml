@model Contact
@{
    string fname = ViewBag.Action + " Contact";
    ViewBag.FirstName = fname;
}
<h2>@ViewBag.Title</h2>
<div>
    <h2>Contact Details</h2>
    <hr />
    <dl class="row border" >
        <!--Iterates through properties to dynamically create table display, much cleaner look-->
        @foreach (var property in typeof(Contact).GetProperties())
        {
            var propertyName = property.Name;
            //Excluding properties that contain "Id" or "Slug"
            if (!propertyName.Contains("Id") && !propertyName.Contains("Slug"))
            {
                //Due to time constraint, less elegant solution to inproper display of categoryName
                if(propertyName == "Category"){
                    <dt class="col-sm-2 border">
                        @Html.DisplayName(propertyName)
                    </dt>
                    <dd class="col-sm-10 border-top">
                        @Html.DisplayFor(model => model.Category.CategoryName)
                    </dd>
                } else {
                    <dt class="col-sm-2 border">
                        @Html.DisplayName(propertyName)
                    </dt>
                    <dd class = "col-sm-10 border-top">
                        @property.GetValue(Model)
                    </dd>
                }
                
            }
        }
    </dl>
</div>
<div>
    <a asp-controller="Contact" asp-action="Edit"
       asp-route-id="@Model.ContactId"
       asp-route-slug="@Model.Slug.Replace(" ","-")"
       class="btn btn-outline-secondary">
        Edit
    </a>
    <a asp-controller="Contact" asp-action="Delete"
       asp-route-id="@Model.ContactId"
       asp-route-slug="@Model.Slug.Replace(" ","-")"
       class="btn btn-outline-danger">
        Delete
    </a>
    <a asp-controller="Home" asp-action="Index"
       class="btn btn-outline-primary">
        Home
    </a>
</div>
